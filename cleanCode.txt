Question 1
Duration: 30 minutes
Fix code smells in the following codes. Assume each code compiles as it is.
NB: Create a public repo named my-clean-code in your GitHub. Add a file named cleanCode.txt
and put your answers there. Send your public repo url to wmunyebvu@zimttech.org.
Code 1
public class MyTest{
public long computeDurationInMilliseconds() {
  return (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;
}

public void doSomething() {
  throw new RuntimeException();
}
}




Code 2
public class MyClass {
private int foo ;

Myclass(int foo) 
{
this.foo = foo;

}


 // Getter
  public String getFoo() {
    return foo;
  }
  // Setter
  public void setFoo(Int foo) {
    this.foo = foo;
  }

public int compute(int a) {
return a * foo;
}




Code 3
class StringUtils {
public static String concatenate(String s1, String s2) {
String concatnatedString= s1.concat(s2);

return concatnatedString;
}
}



Code 4
package my.company;
import java.lang.String;
import my.company2.SomeType;
class ExampleClass {
public String someString;
public SomeType something;
}


Code 5
public class Example2Class{
public void foo(String bar) {
  throw new MyOwnRuntimeException("My Message");
}
}


Code 6
public class Foo {
    private Configuration config;
  public Foo(Configuration myConfig) {
    this.config = myConfig;
  }
  public Collection<User> listUsers() {
       String listingFolder = config.getProperty("myApplication.listingFolder");
       File userList = new File(listingFolder, "users.txt"); 
    Collection<User> users = parse(userList);
    return users;
  }
}


Code 7
public class MyFoo{
 public staic void main(String[] args) {
System.out.println("It works");
}
}



Code 8
public class MyFoorest{
public void run() {
prepare("action1");
execute("action1");
release("action1");
}
public static void prepare(String string){
System.out.println(string+" prepared");
}
public static void execute(String string){
System.out.println(string+" executed");
}
public static void release(String string){
System.out.println(string+" released");
}
}



Code 8
public class MyFoorest{
public void run() {
prepare("action1");
execute("action1");
release("action1");
}
public static void prepare(String string){
System.out.println(string+" prepared");
}
public static void execute(String string){
System.out.println(string+" executed");
}
public static void release(String string){
System.out.println(string+" released");
}
}



Code 9
class ParentClass {
public boolean doSomething(String message){
System.out.println(message);
}
}
class FirstChildClass extends ParentClass {
public boolean doSomething(String message){
System.out.println(message);
}
}

Code 10

class MikeClass{
void doIt(){
System.out.println("I am doing it");
}
}


Code 11
public class Address {
}
public class Person implements Serializable {
private static final long serialVersionUID = 1905122041950251207L;
private String name;
private Address address;
}

Code 12

public class Mine{
int foo(int a, int b) {
if (a == 1) {
return a;
}
return b;
}
}


public class Myclass {
public static final int THRESHOLD = 3;
}

Code 14

class A {
  void process(List<A> list) {
    list.stream()
      .filter(B.class::isInstance)
      .map(B.class::cast)
      .map(B::<String>getObject)
      .forEach(System.out::println);
  }
}

class B extends A {
  <T> T getObject() {
    return null;
  }
}



Code 15
interface Status {

}


//// Either 

public enum Status {                    
  OPEN,
  CLOSED;
}








Code 15
interface Status {
int OPEN = 1;
int CLOSED = 2;
}


Code 16
Map<String, List<Integer>> map = new HashMap();
    List<Integer> list = map.getOrDefault("test",new ArrayList<>());
    list.add(4)
}


Code 17

Boolean b = getBoolean();
if (Boolean.TRUE.equals(b)) {
  foo();
} else {
  bar();  
}

Code 18
public class FirstBaidu{
public void checkFile(File file){
if (file != null) {
if (file.isFile() || file.isDirectory()) {
System.out.println("File is okay");
}
}
}
}


Code 19
public class HelloWorld{
public void myMethod(){
String message = new Random();
System.out.println("Random boolean value is : "
                           + random.nextBoolean());


}


Code 20

public class MyRandom{

f (booleanMethod()) { /* ... */ }
if (!booleanMethod()) { /* ... */ }
if (booleanMethod()) { /* ... */ }
doSomething(true);
doSomething(booleanMethod());

booleanVariable = booleanMethod();
booleanVariable = booleanMethod() || exp;
booleanVariable = !booleanMethod() && exp;
booleanVariable = !booleanMethod() || exp;
booleanVariable = booleanMethod() && exp;

for (var x = 0; ; x++)
{
 ...
}

}




